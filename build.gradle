plugins {
    // 책 버전과 다르게 RELEASE 사라짐
    id 'org.springframework.boot' version '2.4.1'
    // 스프링 부트의 의존성들을 관리해 주는 플러그인이라 꼭 추가
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group 'kr.domo'
version '1.0-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    // 본인 제작 라이브러리 업로드를 위해서는 많은 과정과 설정이 필요하다는 단점 존재
    mavenCentral()
    // 본인 제작 라이브러리 업로드를 간단하게 하였고 자동으로 mavenCentral()에 업로드 연동
    jcenter()
}

// for Junit 5
test {
    useJUnitPlatform()
}

dependencies {
    // 주의! implementation 내부에서 버전 명시 하지 않아야함.
    // Gradle 6 부터 compile -> implementation 으로 변경
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // lombok
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testImplementation('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    // JPA
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링 부트용 Spring Data Jpa 추상화 라이브러리 - 자동 버전 관리
    implementation('com.h2database:h2') // 인모모리 관계형 데이터베이스, 프로젝트 의존성만으로 관리 가능, 테스트 용도로 많이 사용 -> JPA의 테스트/로컬 구동에서 사용
    implementation('org.springframework.session:spring-session-jdbc')

    // Mustache
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    // Security
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    testImplementation("org.springframework.security:spring-security-test")


}
